{"version":3,"sources":["App.js","Controllers/ChatController.js","Controllers/LoginController.js","Controllers/PostController.js","Controllers/QRController.js","Controllers/RegisterController.js","Services/Topics.js","QRGenerator.js","TemplateCache.js","Components/Chat.js","Components/Post.js","Components/QR.js","Components/Register.js","Controllers/MainController.js","main.min.js"],"names":["angular","document","$scope","$http","undefined","ChatController","protocol","location","window","connection","WebSocket","host","onopen","send","PostController","$ctrl","this","post","edit","alert","id","QRController","text","data","QR","create","RegisterController","step","setStep","app","module","run","defaults","headers","common","_this","PAD0","PAD1","_typeNumber","_errorCorrectLevel","_modules","_moduleCount","_dataCache","_dataList","Array","makeImpl","test","maskPattern","moduleCount","modules","row","col","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","r","c","pos","QRUtil","getPatternPosition","i","length","j","getBestMaskPattern","minLostPoint","pattern","lostPoint","getLostPoint","bits","getBCHTypeInfo","mod","getBCHTypeNumber","Math","floor","createBytes","buffer","rsBlocks","offset","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","dataCount","ecCount","totalCount","max","getBuffer","rsPoly","getErrorCorrectPolynomial","rawPoly","qrPolynomial","getLength","modPoly","modIndex","getAt","totalCodeCount","index","typeNumber","errorCorrectLevel","dataList","QRRSBlock","getRSBlocks","qrBitBuffer","put","getMode","getLengthInBits","write","totalDataCount","Error","putBit","inc","bitIndex","byteIndex","maskFunc","getMaskFunction","dark","mask","num","shift","_num","multiply","e","QRMath","gexp","glog","ratio","PATTERN_POSITION_TABLE","G15","G18","G15_MASK","getBCHDigit","digit","d","QRMaskPattern","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","errorCorrectLength","a","mode","type","QRMode","MODE_NUMBER","MODE_ALPHA_NUM","MODE_8BIT_BYTE","MODE_KANJI","qrcode","getModuleCount","sameCount","isDark","count","darkCount","abs","RS_BLOCK_TABLE","qrRSBlock","getRsBlockTable","QRErrorCorrectLevel","L","M","Q","H","rsBlock","list","push","EXP_TABLE","LOG_TABLE","n","_buffer","_length","bufIndex","bit","qr8BitByte","_mode","_bytes","stringToBytes","QRCodeLimitLength","s","bytes","charCodeAt","addData","newData","getUTF8Length","replaced","encodeURI","toString","replace","getTypeNumber","len","limit","draw","elements","x","y","factory","$cacheFactory","$injector","allTemplatePromise","cache","get","url","fromCache","then","response","status","key","value","component","templateUrl","controller","bindings","totp","success","token","posts","top","amount","failure","er"],"mappings":"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KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,IAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,IAAA,MACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,IAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,IAAA,GAAA,EAAA,IAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,IAAA,MACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,IAAA,GAAA,EAAA,IAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,IAAA,GAAA,EAAA,IAAA,KACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,EAAA,GAAA,GAAA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,EAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,GAAA,GAAA,KACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,GAAA,IAAA,IAAA,EAAA,IAAA,MACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,GAAA,IAAA,MACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,EAAA,IAAA,MACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,GAAA,IAAA,MACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,GAAA,IAAA,IAAA,EAAA,IAAA,MACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,GAAA,IAAA,MACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,GAAA,IAAA,IAAA,EAAA,IAAA,MACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,GAAA,IAAA,IAAA,EAAA,IAAA,MACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KACA,GAAA,GAAA,GAAA,EAAA,GAAA,KAGA,GAAA,IAAA,IAAA,EAAA,IAAA,MACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,GAAA,IAAA,MACA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,EAAA,GAAA,GAAA,GAAA,GAAA,KAGA,GAAA,IAAA,IAAA,EAAA,IAAA,MACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,KAGA,EAAA,IAAA,IAAA,GAAA,IAAA,MACA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,GAAA,GAAA,GAAA,GAAA,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","file":"main.min.js","sourcesContent":["app.run([$http, function ($http) {\r\n    // Set the X-Requested-With so that ASP Identity wont redirect us, and instead sends a plain 401.\r\n    $http.defaults.headers.common[\"X-Requested-With\"] = \"XMLHttpRequest\"; \r\n}]);","function ChatController() {\r\n    var $ctrl = this;\r\n    var location = window.location,\r\n        protocol;\r\n    if (location.protocol === \"http:\") {\r\n        protocol = \"ws:\";\r\n    } else {\r\n        protocol = \"wss:\";\r\n    }\r\n\r\n    var connection = new WebSocket(protocol + \"//\" + location.host);\r\n    connection.onopen = function () {\r\n        connection.send(\"Hello\");\r\n    };\r\n}","app.controller(\"LoginController\", [$scope, \"TOTP\", function ($scope, totp) {\r\n    totp.success(function (data) {\r\n        $scope.totp = \"otpauth://totp/Example:alice@google.com?secret=\" + data.token + \"&issuer=Example\";\r\n    });\r\n}]);","function PostController() {\r\n    var $ctrl = this,\r\n        post = $ctrl.post;\r\n\r\n    $ctrl.edit = function () {\r\n        alert(post.id);\r\n    };\r\n    $ctrl.delete = function () {\r\n    };\r\n}","function QRController() {\r\n    var $ctrl = this,\r\n        text = $ctrl.text;\r\n    $ctrl.data = QR.create(text);\r\n}","function RegisterController() {\r\n    var $ctrl = this;\r\n\r\n    $ctrl.step = 1;\r\n    $ctrl.setStep = function (step) {\r\n        $ctrl.step = step;\r\n    }\r\n}","app.factory(\"Topics\", [$http, function ($http) {\r\n    return {\r\n        top: function (amount) {\r\n            return $http\r\n                .get(\"\")\r\n                .success(function (data) {\r\n                    return data;\r\n                })\r\n                .failure(function (er) {\r\n                    return er;\r\n                });\r\n        }\r\n    }\r\n}]);","/**\r\n * Based on;\r\n * https://github.com/kazuhikoarase/qrcode-generator/\r\n * https://github.com/davidshimjs/qrcodejs/\r\n * \r\n * Licensed under the MIT License;\r\n * http://www.opensource.org/licenses/mit-license.php\r\n * \r\n * The word \"QR Code\" is registered trademark of;\r\n * DENSO WAVE INCORPORATED\r\n * http://www.denso-wave.com/qrcode/faqpatent-e.html\r\n */\r\nvar QR = {};\r\n\r\n(function () {\r\n    var _this = {};\r\n\r\n    var PAD0 = 0xEC;\r\n    var PAD1 = 0x11;\r\n\r\n    var _typeNumber = 0;\r\n    var _errorCorrectLevel = 0;\r\n    var _modules = null;\r\n    var _moduleCount = 0;\r\n    var _dataCache = null;\r\n    var _dataList = new Array();\r\n\r\n    var makeImpl = function (test, maskPattern) {\r\n\r\n        _moduleCount = _typeNumber * 4 + 17;\r\n        _modules = function (moduleCount) {\r\n            var modules = new Array(moduleCount);\r\n            for (var row = 0; row < moduleCount; row += 1) {\r\n                modules[row] = new Array(moduleCount);\r\n                for (var col = 0; col < moduleCount; col += 1) {\r\n                    modules[row][col] = null;\r\n                }\r\n            }\r\n            return modules;\r\n        }(_moduleCount);\r\n\r\n        setupPositionProbePattern(0, 0);\r\n        setupPositionProbePattern(_moduleCount - 7, 0);\r\n        setupPositionProbePattern(0, _moduleCount - 7);\r\n        setupPositionAdjustPattern();\r\n        setupTimingPattern();\r\n        setupTypeInfo(test, maskPattern);\r\n\r\n        if (_typeNumber >= 7) {\r\n            setupTypeNumber(test);\r\n        }\r\n\r\n        if (_dataCache === null) {\r\n            _dataCache = createData(_typeNumber, _errorCorrectLevel, _dataList);\r\n        }\r\n\r\n        mapData(_dataCache, maskPattern);\r\n    };\r\n\r\n    var setupPositionProbePattern = function (row, col) {\r\n\r\n        for (var r = -1; r <= 7; r += 1) {\r\n\r\n            if (row + r <= -1 || _moduleCount <= row + r) continue;\r\n\r\n            for (var c = -1; c <= 7; c += 1) {\r\n\r\n                if (col + c <= -1 || _moduleCount <= col + c) continue;\r\n\r\n                if (0 <= r && r <= 6 && (c === 0 || c === 6)\r\n                    || 0 <= c && c <= 6 && (r === 0 || r === 6)\r\n                    || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\r\n                    _modules[row + r][col + c] = true;\r\n                } else {\r\n                    _modules[row + r][col + c] = false;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    var setupPositionAdjustPattern = function () {\r\n\r\n        var pos = QRUtil.getPatternPosition(_typeNumber);\r\n\r\n        for (var i = 0; i < pos.length; i += 1) {\r\n\r\n            for (var j = 0; j < pos.length; j += 1) {\r\n\r\n                var row = pos[i];\r\n                var col = pos[j];\r\n\r\n                if (_modules[row][col] !== null) {\r\n                    continue;\r\n                }\r\n\r\n                for (var r = -2; r <= 2; r += 1) {\r\n\r\n                    for (var c = -2; c <= 2; c += 1) {\r\n\r\n                        if (r === -2 || r === 2 || c === -2 || c === 2\r\n                            || r === 0 && c === 0) {\r\n                            _modules[row + r][col + c] = true;\r\n                        } else {\r\n                            _modules[row + r][col + c] = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    var getBestMaskPattern = function () {\r\n\r\n        var minLostPoint = 0;\r\n        var pattern = 0;\r\n\r\n        for (var i = 0; i < 8; i += 1) {\r\n\r\n            makeImpl(true, i);\r\n\r\n            var lostPoint = QRUtil.getLostPoint(_this);\r\n\r\n            if (i === 0 || minLostPoint > lostPoint) {\r\n                minLostPoint = lostPoint;\r\n                pattern = i;\r\n            }\r\n        }\r\n\r\n        return pattern;\r\n    };\r\n\r\n    var setupTimingPattern = function () {\r\n\r\n        for (var r = 8; r < _moduleCount - 8; r += 1) {\r\n            if (_modules[r][6] !== null) {\r\n                continue;\r\n            }\r\n            _modules[r][6] = r % 2 === 0;\r\n        }\r\n\r\n        for (var c = 8; c < _moduleCount - 8; c += 1) {\r\n            if (_modules[6][c] !== null) {\r\n                continue;\r\n            }\r\n            _modules[6][c] = c % 2 === 0;\r\n        }\r\n    };\r\n\r\n    var setupTypeInfo = function (test, maskPattern) {\r\n\r\n        var data = _errorCorrectLevel << 3 | maskPattern;\r\n        var bits = QRUtil.getBCHTypeInfo(data);\r\n\r\n        // vertical\r\n        for (var i = 0; i < 15; i += 1) {\r\n\r\n            var mod = !test && (bits >> i & 1) === 1;\r\n\r\n            if (i < 6) {\r\n                _modules[i][8] = mod;\r\n            } else if (i < 8) {\r\n                _modules[i + 1][8] = mod;\r\n            } else {\r\n                _modules[_moduleCount - 15 + i][8] = mod;\r\n            }\r\n        }\r\n\r\n        // horizontal\r\n        for (var i = 0; i < 15; i += 1) {\r\n\r\n            var mod = !test && (bits >> i & 1) === 1;\r\n\r\n            if (i < 8) {\r\n                _modules[8][_moduleCount - i - 1] = mod;\r\n            } else if (i < 9) {\r\n                _modules[8][15 - i - 1 + 1] = mod;\r\n            } else {\r\n                _modules[8][15 - i - 1] = mod;\r\n            }\r\n        }\r\n\r\n        // fixed module\r\n        _modules[_moduleCount - 8][8] = !test;\r\n    };\r\n\r\n    var setupTypeNumber = function (test) {\r\n\r\n        var bits = QRUtil.getBCHTypeNumber(_typeNumber);\r\n\r\n        for (var i = 0; i < 18; i += 1) {\r\n            var mod = !test && (bits >> i & 1) === 1;\r\n            _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\r\n        }\r\n\r\n        for (var i = 0; i < 18; i += 1) {\r\n            var mod = !test && (bits >> i & 1) === 1;\r\n            _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\r\n        }\r\n    };\r\n\r\n    var createBytes = function (buffer, rsBlocks) {\r\n\r\n        var offset = 0;\r\n\r\n        var maxDcCount = 0;\r\n        var maxEcCount = 0;\r\n\r\n        var dcdata = new Array(rsBlocks.length);\r\n        var ecdata = new Array(rsBlocks.length);\r\n\r\n        for (var r = 0; r < rsBlocks.length; r += 1) {\r\n\r\n            var dcCount = rsBlocks[r].dataCount;\r\n            var ecCount = rsBlocks[r].totalCount - dcCount;\r\n\r\n            maxDcCount = Math.max(maxDcCount, dcCount);\r\n            maxEcCount = Math.max(maxEcCount, ecCount);\r\n\r\n            dcdata[r] = new Array(dcCount);\r\n\r\n            for (var i = 0; i < dcdata[r].length; i += 1) {\r\n                dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\r\n            }\r\n            offset += dcCount;\r\n\r\n            var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\r\n            var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\r\n\r\n            var modPoly = rawPoly.mod(rsPoly);\r\n            ecdata[r] = new Array(rsPoly.getLength() - 1);\r\n            for (var i = 0; i < ecdata[r].length; i += 1) {\r\n                var modIndex = i + modPoly.getLength() - ecdata[r].length;\r\n                ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\r\n            }\r\n        }\r\n\r\n        var totalCodeCount = 0;\r\n        for (var i = 0; i < rsBlocks.length; i += 1) {\r\n            totalCodeCount += rsBlocks[i].totalCount;\r\n        }\r\n\r\n        var data = new Array(totalCodeCount);\r\n        var index = 0;\r\n\r\n        for (var i = 0; i < maxDcCount; i += 1) {\r\n            for (var r = 0; r < rsBlocks.length; r += 1) {\r\n                if (i < dcdata[r].length) {\r\n                    data[index] = dcdata[r][i];\r\n                    index += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i = 0; i < maxEcCount; i += 1) {\r\n            for (var r = 0; r < rsBlocks.length; r += 1) {\r\n                if (i < ecdata[r].length) {\r\n                    data[index] = ecdata[r][i];\r\n                    index += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return data;\r\n    };\r\n\r\n    var createData = function (typeNumber, errorCorrectLevel, dataList) {\r\n\r\n        var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\r\n\r\n        var buffer = qrBitBuffer();\r\n\r\n        for (var i = 0; i < dataList.length; i += 1) {\r\n            var data = dataList[i];\r\n            buffer.put(data.getMode(), 4);\r\n            buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\r\n            data.write(buffer);\r\n        }\r\n\r\n        // calc num max data.\r\n        var totalDataCount = 0;\r\n        for (var i = 0; i < rsBlocks.length; i += 1) {\r\n            totalDataCount += rsBlocks[i].dataCount;\r\n        }\r\n\r\n        if (buffer.getLengthInBits() > totalDataCount * 8) {\r\n            throw new Error(\"code length overflow. (\"\r\n              + buffer.getLengthInBits()\r\n              + \">\"\r\n              + totalDataCount * 8\r\n              + \")\");\r\n        }\r\n\r\n        // end code\r\n        if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\r\n            buffer.put(0, 4);\r\n        }\r\n\r\n        // padding\r\n        while (buffer.getLengthInBits() % 8 !== 0) {\r\n            buffer.putBit(false);\r\n        }\r\n\r\n        // padding\r\n        while (buffer.getLengthInBits() < totalDataCount * 8) {\r\n            buffer.put(PAD0, 8);\r\n\r\n            if (buffer.getLengthInBits() >= totalDataCount * 8) {\r\n                break;\r\n            }\r\n            buffer.put(PAD1, 8);\r\n        }\r\n\r\n        return createBytes(buffer, rsBlocks);\r\n    };\r\n\r\n    var mapData = function (data, maskPattern) {\r\n\r\n        var inc = -1;\r\n        var row = _moduleCount - 1;\r\n        var bitIndex = 7;\r\n        var byteIndex = 0;\r\n        var maskFunc = QRUtil.getMaskFunction(maskPattern);\r\n\r\n        for (var col = _moduleCount - 1; col > 0; col -= 2) {\r\n\r\n            if (col === 6) col -= 1;\r\n\r\n            while (true) {\r\n\r\n                for (var c = 0; c < 2; c += 1) {\r\n\r\n                    if (_modules[row][col - c] === null) {\r\n\r\n                        var dark = false;\r\n\r\n                        if (byteIndex < data.length)\r\n                            dark = (data[byteIndex] >>> bitIndex & 1) === 1;\r\n\r\n                        var mask = maskFunc(row, col - c);\r\n\r\n                        if (mask) {\r\n                            dark = !dark;\r\n                        }\r\n\r\n                        _modules[row][col - c] = dark;\r\n                        bitIndex -= 1;\r\n\r\n                        if (bitIndex === -1) {\r\n                            byteIndex += 1;\r\n                            bitIndex = 7;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                row += inc;\r\n\r\n                if (row < 0 || _moduleCount <= row) {\r\n                    row -= inc;\r\n                    inc = -inc;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    var qrPolynomial = function (num, shift) {\r\n\r\n        if (typeof num.length === undefined) {\r\n            throw new Error(num.length + \"/\" + shift);\r\n        }\r\n\r\n        var _num = function () {\r\n            var offset = 0;\r\n            while (offset < num.length && num[offset] === 0) {\r\n                offset += 1;\r\n            }\r\n            var _num = new Array(num.length - offset + shift);\r\n            for (var i = 0; i < num.length - offset; i += 1) {\r\n                _num[i] = num[i + offset];\r\n            }\r\n            return _num;\r\n        }();\r\n\r\n        var _this = {};\r\n\r\n        _this.getAt = function (index) {\r\n            return _num[index];\r\n        };\r\n\r\n        _this.getLength = function () {\r\n            return _num.length;\r\n        };\r\n\r\n        _this.multiply = function (e) {\r\n\r\n            var num = new Array(_this.getLength() + e.getLength() - 1);\r\n\r\n            for (var i = 0; i < _this.getLength(); i += 1) {\r\n                for (var j = 0; j < e.getLength(); j += 1) {\r\n                    num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)));\r\n                }\r\n            }\r\n\r\n            return qrPolynomial(num, 0);\r\n        };\r\n\r\n        _this.mod = function (e) {\r\n\r\n            if (_this.getLength() - e.getLength() < 0) {\r\n                return _this;\r\n            }\r\n\r\n            var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0));\r\n\r\n            var num = new Array(_this.getLength());\r\n            for (var i = 0; i < _this.getLength(); i += 1) {\r\n                num[i] = _this.getAt(i);\r\n            }\r\n\r\n            for (var i = 0; i < e.getLength(); i += 1) {\r\n                num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio);\r\n            }\r\n\r\n            // recursive call\r\n            return qrPolynomial(num, 0).mod(e);\r\n        };\r\n\r\n        return _this;\r\n    };\r\n\r\n    var QRUtil = function () {\r\n\r\n        var PATTERN_POSITION_TABLE = [\r\n          [],\r\n          [6, 18],\r\n          [6, 22],\r\n          [6, 26],\r\n          [6, 30],\r\n          [6, 34],\r\n          [6, 22, 38],\r\n          [6, 24, 42],\r\n          [6, 26, 46],\r\n          [6, 28, 50],\r\n          [6, 30, 54],\r\n          [6, 32, 58],\r\n          [6, 34, 62],\r\n          [6, 26, 46, 66],\r\n          [6, 26, 48, 70],\r\n          [6, 26, 50, 74],\r\n          [6, 30, 54, 78],\r\n          [6, 30, 56, 82],\r\n          [6, 30, 58, 86],\r\n          [6, 34, 62, 90],\r\n          [6, 28, 50, 72, 94],\r\n          [6, 26, 50, 74, 98],\r\n          [6, 30, 54, 78, 102],\r\n          [6, 28, 54, 80, 106],\r\n          [6, 32, 58, 84, 110],\r\n          [6, 30, 58, 86, 114],\r\n          [6, 34, 62, 90, 118],\r\n          [6, 26, 50, 74, 98, 122],\r\n          [6, 30, 54, 78, 102, 126],\r\n          [6, 26, 52, 78, 104, 130],\r\n          [6, 30, 56, 82, 108, 134],\r\n          [6, 34, 60, 86, 112, 138],\r\n          [6, 30, 58, 86, 114, 142],\r\n          [6, 34, 62, 90, 118, 146],\r\n          [6, 30, 54, 78, 102, 126, 150],\r\n          [6, 24, 50, 76, 102, 128, 154],\r\n          [6, 28, 54, 80, 106, 132, 158],\r\n          [6, 32, 58, 84, 110, 136, 162],\r\n          [6, 26, 54, 82, 110, 138, 166],\r\n          [6, 30, 58, 86, 114, 142, 170]\r\n        ];\r\n        var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\r\n        var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\r\n        var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\r\n\r\n        var _this = {};\r\n\r\n        var getBCHDigit = function (data) {\r\n            var digit = 0;\r\n            while (data !== 0) {\r\n                digit += 1;\r\n                data >>>= 1;\r\n            }\r\n            return digit;\r\n        };\r\n\r\n        _this.getBCHTypeInfo = function (data) {\r\n            var d = data << 10;\r\n            while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\r\n                d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);\r\n            }\r\n            return (data << 10 | d) ^ G15_MASK;\r\n        };\r\n\r\n        _this.getBCHTypeNumber = function (data) {\r\n            var d = data << 12;\r\n            while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\r\n                d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);\r\n            }\r\n            return data << 12 | d;\r\n        };\r\n\r\n        _this.getPatternPosition = function (typeNumber) {\r\n            return PATTERN_POSITION_TABLE[typeNumber - 1];\r\n        };\r\n\r\n        _this.getMaskFunction = function (maskPattern) {\r\n\r\n            switch (maskPattern) {\r\n\r\n                case QRMaskPattern.PATTERN000:\r\n                    return function (i, j) { return (i + j) % 2 === 0; };\r\n                case QRMaskPattern.PATTERN001:\r\n                    return function (i, j) { return i % 2 === 0; };\r\n                case QRMaskPattern.PATTERN010:\r\n                    return function (i, j) { return j % 3 === 0; };\r\n                case QRMaskPattern.PATTERN011:\r\n                    return function (i, j) { return (i + j) % 3 === 0; };\r\n                case QRMaskPattern.PATTERN100:\r\n                    return function (i, j) { return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0; };\r\n                case QRMaskPattern.PATTERN101:\r\n                    return function (i, j) { return i * j % 2 + i * j % 3 === 0; };\r\n                case QRMaskPattern.PATTERN110:\r\n                    return function (i, j) { return (i * j % 2 + i * j % 3) % 2 === 0; };\r\n                case QRMaskPattern.PATTERN111:\r\n                    return function (i, j) { return (i * j % 3 + (i + j) % 2) % 2 === 0; };\r\n\r\n                default:\r\n                    throw new Error(\"bad maskPattern:\" + maskPattern);\r\n            }\r\n        };\r\n\r\n        _this.getErrorCorrectPolynomial = function (errorCorrectLength) {\r\n            var a = qrPolynomial([1], 0);\r\n            for (var i = 0; i < errorCorrectLength; i += 1) {\r\n                a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0));\r\n            }\r\n            return a;\r\n        };\r\n\r\n        _this.getLengthInBits = function (mode, type) {\r\n\r\n            if (1 <= type && type < 10) {\r\n\r\n                // 1 - 9\r\n\r\n                switch (mode) {\r\n                    case QRMode.MODE_NUMBER: return 10;\r\n                    case QRMode.MODE_ALPHA_NUM: return 9;\r\n                    case QRMode.MODE_8BIT_BYTE: return 8;\r\n                    case QRMode.MODE_KANJI: return 8;\r\n                    default:\r\n                        throw new Error(\"mode:\" + mode);\r\n                }\r\n\r\n            } else if (type < 27) {\r\n\r\n                // 10 - 26\r\n\r\n                switch (mode) {\r\n                    case QRMode.MODE_NUMBER: return 12;\r\n                    case QRMode.MODE_ALPHA_NUM: return 11;\r\n                    case QRMode.MODE_8BIT_BYTE: return 16;\r\n                    case QRMode.MODE_KANJI: return 10;\r\n                    default:\r\n                        throw new Error(\"mode:\" + mode);\r\n                }\r\n\r\n            } else if (type < 41) {\r\n\r\n                // 27 - 40\r\n\r\n                switch (mode) {\r\n                    case QRMode.MODE_NUMBER: return 14;\r\n                    case QRMode.MODE_ALPHA_NUM: return 13;\r\n                    case QRMode.MODE_8BIT_BYTE: return 16;\r\n                    case QRMode.MODE_KANJI: return 12;\r\n                    default:\r\n                        throw new Error(\"mode:\" + mode);\r\n                }\r\n\r\n            } else {\r\n                throw new Error(\"type:\" + type);\r\n            }\r\n        };\r\n\r\n        _this.getLostPoint = function (qrcode) {\r\n\r\n            var moduleCount = getModuleCount();\r\n\r\n            var lostPoint = 0;\r\n\r\n            // LEVEL1\r\n\r\n            for (var row = 0; row < moduleCount; row += 1) {\r\n                for (var col = 0; col < moduleCount; col += 1) {\r\n\r\n                    var sameCount = 0;\r\n                    var dark = isDark(row, col);\r\n\r\n                    for (var r = -1; r <= 1; r += 1) {\r\n\r\n                        if (row + r < 0 || moduleCount <= row + r) {\r\n                            continue;\r\n                        }\r\n\r\n                        for (var c = -1; c <= 1; c += 1) {\r\n\r\n                            if (col + c < 0 || moduleCount <= col + c) {\r\n                                continue;\r\n                            }\r\n\r\n                            if (r === 0 && c === 0) {\r\n                                continue;\r\n                            }\r\n\r\n                            if (dark === isDark(row + r, col + c)) {\r\n                                sameCount += 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (sameCount > 5) {\r\n                        lostPoint += 3 + sameCount - 5;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // LEVEL2\r\n\r\n            for (var row = 0; row < moduleCount - 1; row += 1) {\r\n                for (var col = 0; col < moduleCount - 1; col += 1) {\r\n                    var count = 0;\r\n                    if (isDark(row, col)) count += 1;\r\n                    if (isDark(row + 1, col)) count += 1;\r\n                    if (isDark(row, col + 1)) count += 1;\r\n                    if (isDark(row + 1, col + 1)) count += 1;\r\n                    if (count === 0 || count === 4) {\r\n                        lostPoint += 3;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // LEVEL3\r\n\r\n            for (var row = 0; row < moduleCount; row += 1) {\r\n                for (var col = 0; col < moduleCount - 6; col += 1) {\r\n                    if (isDark(row, col)\r\n                        && !isDark(row, col + 1)\r\n                        && isDark(row, col + 2)\r\n                        && isDark(row, col + 3)\r\n                        && isDark(row, col + 4)\r\n                        && !isDark(row, col + 5)\r\n                        && isDark(row, col + 6)) {\r\n                        lostPoint += 40;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (var col = 0; col < moduleCount; col += 1) {\r\n                for (var row = 0; row < moduleCount - 6; row += 1) {\r\n                    if (isDark(row, col)\r\n                        && !isDark(row + 1, col)\r\n                        && isDark(row + 2, col)\r\n                        && isDark(row + 3, col)\r\n                        && isDark(row + 4, col)\r\n                        && !isDark(row + 5, col)\r\n                        && isDark(row + 6, col)) {\r\n                        lostPoint += 40;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // LEVEL4\r\n\r\n            var darkCount = 0;\r\n\r\n            for (var col = 0; col < moduleCount; col += 1) {\r\n                for (var row = 0; row < moduleCount; row += 1) {\r\n                    if (isDark(row, col)) {\r\n                        darkCount += 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\r\n            lostPoint += ratio * 10;\r\n\r\n            return lostPoint;\r\n        };\r\n\r\n        return _this;\r\n    }();\r\n\r\n    var QRRSBlock = function () {\r\n\r\n        var RS_BLOCK_TABLE = [\r\n\r\n          // L\r\n          // M\r\n          // Q\r\n          // H\r\n\r\n          // 1\r\n          [1, 26, 19],\r\n          [1, 26, 16],\r\n          [1, 26, 13],\r\n          [1, 26, 9],\r\n\r\n          // 2\r\n          [1, 44, 34],\r\n          [1, 44, 28],\r\n          [1, 44, 22],\r\n          [1, 44, 16],\r\n\r\n          // 3\r\n          [1, 70, 55],\r\n          [1, 70, 44],\r\n          [2, 35, 17],\r\n          [2, 35, 13],\r\n\r\n          // 4\r\n          [1, 100, 80],\r\n          [2, 50, 32],\r\n          [2, 50, 24],\r\n          [4, 25, 9],\r\n\r\n          // 5\r\n          [1, 134, 108],\r\n          [2, 67, 43],\r\n          [2, 33, 15, 2, 34, 16],\r\n          [2, 33, 11, 2, 34, 12],\r\n\r\n          // 6\r\n          [2, 86, 68],\r\n          [4, 43, 27],\r\n          [4, 43, 19],\r\n          [4, 43, 15],\r\n\r\n          // 7\r\n          [2, 98, 78],\r\n          [4, 49, 31],\r\n          [2, 32, 14, 4, 33, 15],\r\n          [4, 39, 13, 1, 40, 14],\r\n\r\n          // 8\r\n          [2, 121, 97],\r\n          [2, 60, 38, 2, 61, 39],\r\n          [4, 40, 18, 2, 41, 19],\r\n          [4, 40, 14, 2, 41, 15],\r\n\r\n          // 9\r\n          [2, 146, 116],\r\n          [3, 58, 36, 2, 59, 37],\r\n          [4, 36, 16, 4, 37, 17],\r\n          [4, 36, 12, 4, 37, 13],\r\n\r\n          // 10\r\n          [2, 86, 68, 2, 87, 69],\r\n          [4, 69, 43, 1, 70, 44],\r\n          [6, 43, 19, 2, 44, 20],\r\n          [6, 43, 15, 2, 44, 16],\r\n\r\n          // 11\r\n          [4, 101, 81],\r\n          [1, 80, 50, 4, 81, 51],\r\n          [4, 50, 22, 4, 51, 23],\r\n          [3, 36, 12, 8, 37, 13],\r\n\r\n          // 12\r\n          [2, 116, 92, 2, 117, 93],\r\n          [6, 58, 36, 2, 59, 37],\r\n          [4, 46, 20, 6, 47, 21],\r\n          [7, 42, 14, 4, 43, 15],\r\n\r\n          // 13\r\n          [4, 133, 107],\r\n          [8, 59, 37, 1, 60, 38],\r\n          [8, 44, 20, 4, 45, 21],\r\n          [12, 33, 11, 4, 34, 12],\r\n\r\n          // 14\r\n          [3, 145, 115, 1, 146, 116],\r\n          [4, 64, 40, 5, 65, 41],\r\n          [11, 36, 16, 5, 37, 17],\r\n          [11, 36, 12, 5, 37, 13],\r\n\r\n          // 15\r\n          [5, 109, 87, 1, 110, 88],\r\n          [5, 65, 41, 5, 66, 42],\r\n          [5, 54, 24, 7, 55, 25],\r\n          [11, 36, 12, 7, 37, 13],\r\n\r\n          // 16\r\n          [5, 122, 98, 1, 123, 99],\r\n          [7, 73, 45, 3, 74, 46],\r\n          [15, 43, 19, 2, 44, 20],\r\n          [3, 45, 15, 13, 46, 16],\r\n\r\n          // 17\r\n          [1, 135, 107, 5, 136, 108],\r\n          [10, 74, 46, 1, 75, 47],\r\n          [1, 50, 22, 15, 51, 23],\r\n          [2, 42, 14, 17, 43, 15],\r\n\r\n          // 18\r\n          [5, 150, 120, 1, 151, 121],\r\n          [9, 69, 43, 4, 70, 44],\r\n          [17, 50, 22, 1, 51, 23],\r\n          [2, 42, 14, 19, 43, 15],\r\n\r\n          // 19\r\n          [3, 141, 113, 4, 142, 114],\r\n          [3, 70, 44, 11, 71, 45],\r\n          [17, 47, 21, 4, 48, 22],\r\n          [9, 39, 13, 16, 40, 14],\r\n\r\n          // 20\r\n          [3, 135, 107, 5, 136, 108],\r\n          [3, 67, 41, 13, 68, 42],\r\n          [15, 54, 24, 5, 55, 25],\r\n          [15, 43, 15, 10, 44, 16],\r\n\r\n          // 21\r\n          [4, 144, 116, 4, 145, 117],\r\n          [17, 68, 42],\r\n          [17, 50, 22, 6, 51, 23],\r\n          [19, 46, 16, 6, 47, 17],\r\n\r\n          // 22\r\n          [2, 139, 111, 7, 140, 112],\r\n          [17, 74, 46],\r\n          [7, 54, 24, 16, 55, 25],\r\n          [34, 37, 13],\r\n\r\n          // 23\r\n          [4, 151, 121, 5, 152, 122],\r\n          [4, 75, 47, 14, 76, 48],\r\n          [11, 54, 24, 14, 55, 25],\r\n          [16, 45, 15, 14, 46, 16],\r\n\r\n          // 24\r\n          [6, 147, 117, 4, 148, 118],\r\n          [6, 73, 45, 14, 74, 46],\r\n          [11, 54, 24, 16, 55, 25],\r\n          [30, 46, 16, 2, 47, 17],\r\n\r\n          // 25\r\n          [8, 132, 106, 4, 133, 107],\r\n          [8, 75, 47, 13, 76, 48],\r\n          [7, 54, 24, 22, 55, 25],\r\n          [22, 45, 15, 13, 46, 16],\r\n\r\n          // 26\r\n          [10, 142, 114, 2, 143, 115],\r\n          [19, 74, 46, 4, 75, 47],\r\n          [28, 50, 22, 6, 51, 23],\r\n          [33, 46, 16, 4, 47, 17],\r\n\r\n          // 27\r\n          [8, 152, 122, 4, 153, 123],\r\n          [22, 73, 45, 3, 74, 46],\r\n          [8, 53, 23, 26, 54, 24],\r\n          [12, 45, 15, 28, 46, 16],\r\n\r\n          // 28\r\n          [3, 147, 117, 10, 148, 118],\r\n          [3, 73, 45, 23, 74, 46],\r\n          [4, 54, 24, 31, 55, 25],\r\n          [11, 45, 15, 31, 46, 16],\r\n\r\n          // 29\r\n          [7, 146, 116, 7, 147, 117],\r\n          [21, 73, 45, 7, 74, 46],\r\n          [1, 53, 23, 37, 54, 24],\r\n          [19, 45, 15, 26, 46, 16],\r\n\r\n          // 30\r\n          [5, 145, 115, 10, 146, 116],\r\n          [19, 75, 47, 10, 76, 48],\r\n          [15, 54, 24, 25, 55, 25],\r\n          [23, 45, 15, 25, 46, 16],\r\n\r\n          // 31\r\n          [13, 145, 115, 3, 146, 116],\r\n          [2, 74, 46, 29, 75, 47],\r\n          [42, 54, 24, 1, 55, 25],\r\n          [23, 45, 15, 28, 46, 16],\r\n\r\n          // 32\r\n          [17, 145, 115],\r\n          [10, 74, 46, 23, 75, 47],\r\n          [10, 54, 24, 35, 55, 25],\r\n          [19, 45, 15, 35, 46, 16],\r\n\r\n          // 33\r\n          [17, 145, 115, 1, 146, 116],\r\n          [14, 74, 46, 21, 75, 47],\r\n          [29, 54, 24, 19, 55, 25],\r\n          [11, 45, 15, 46, 46, 16],\r\n\r\n          // 34\r\n          [13, 145, 115, 6, 146, 116],\r\n          [14, 74, 46, 23, 75, 47],\r\n          [44, 54, 24, 7, 55, 25],\r\n          [59, 46, 16, 1, 47, 17],\r\n\r\n          // 35\r\n          [12, 151, 121, 7, 152, 122],\r\n          [12, 75, 47, 26, 76, 48],\r\n          [39, 54, 24, 14, 55, 25],\r\n          [22, 45, 15, 41, 46, 16],\r\n\r\n          // 36\r\n          [6, 151, 121, 14, 152, 122],\r\n          [6, 75, 47, 34, 76, 48],\r\n          [46, 54, 24, 10, 55, 25],\r\n          [2, 45, 15, 64, 46, 16],\r\n\r\n          // 37\r\n          [17, 152, 122, 4, 153, 123],\r\n          [29, 74, 46, 14, 75, 47],\r\n          [49, 54, 24, 10, 55, 25],\r\n          [24, 45, 15, 46, 46, 16],\r\n\r\n          // 38\r\n          [4, 152, 122, 18, 153, 123],\r\n          [13, 74, 46, 32, 75, 47],\r\n          [48, 54, 24, 14, 55, 25],\r\n          [42, 45, 15, 32, 46, 16],\r\n\r\n          // 39\r\n          [20, 147, 117, 4, 148, 118],\r\n          [40, 75, 47, 7, 76, 48],\r\n          [43, 54, 24, 22, 55, 25],\r\n          [10, 45, 15, 67, 46, 16],\r\n\r\n          // 40\r\n          [19, 148, 118, 6, 149, 119],\r\n          [18, 75, 47, 31, 76, 48],\r\n          [34, 54, 24, 34, 55, 25],\r\n          [20, 45, 15, 61, 46, 16]\r\n        ];\r\n\r\n        var qrRSBlock = function (totalCount, dataCount) {\r\n            var _this = {};\r\n            _this.totalCount = totalCount;\r\n            _this.dataCount = dataCount;\r\n            return _this;\r\n        };\r\n\r\n        var _this = {};\r\n\r\n        var getRsBlockTable = function (typeNumber, errorCorrectLevel) {\r\n\r\n            switch (errorCorrectLevel) {\r\n                case QRErrorCorrectLevel.L:\r\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\r\n                case QRErrorCorrectLevel.M:\r\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\r\n                case QRErrorCorrectLevel.Q:\r\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\r\n                case QRErrorCorrectLevel.H:\r\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\r\n                default:\r\n                    return undefined;\r\n            }\r\n        };\r\n\r\n        _this.getRSBlocks = function (typeNumber, errorCorrectLevel) {\r\n\r\n            var rsBlock = getRsBlockTable(typeNumber, errorCorrectLevel);\r\n\r\n            if (typeof rsBlock === undefined) {\r\n                throw new Error(\"bad rs block @ typeNumber:\" + typeNumber +\r\n                    \"/errorCorrectLevel:\" + errorCorrectLevel);\r\n            }\r\n\r\n            var length = rsBlock.length / 3;\r\n\r\n            var list = new Array();\r\n\r\n            for (var i = 0; i < length; i += 1) {\r\n\r\n                var count = rsBlock[i * 3 + 0];\r\n                var totalCount = rsBlock[i * 3 + 1];\r\n                var dataCount = rsBlock[i * 3 + 2];\r\n\r\n                for (var j = 0; j < count; j += 1) {\r\n                    list.push(qrRSBlock(totalCount, dataCount));\r\n                }\r\n            }\r\n\r\n            return list;\r\n        };\r\n\r\n        return _this;\r\n    }();\r\n\r\n    var EXP_TABLE = new Array(256);\r\n    var LOG_TABLE = new Array(256);\r\n    var QRMath = function () {\r\n        // initialize tables\r\n        for (var i = 0; i < 8; i += 1) {\r\n            EXP_TABLE[i] = 1 << i;\r\n        }\r\n        for (var i = 8; i < 256; i += 1) {\r\n            EXP_TABLE[i] = EXP_TABLE[i - 4]\r\n              ^ EXP_TABLE[i - 5]\r\n              ^ EXP_TABLE[i - 6]\r\n              ^ EXP_TABLE[i - 8];\r\n        }\r\n        for (var i = 0; i < 255; i += 1) {\r\n            LOG_TABLE[EXP_TABLE[i]] = i;\r\n        }\r\n\r\n        var _this = {};\r\n\r\n        _this.glog = function (n) {\r\n\r\n            if (n < 1) {\r\n                throw new Error(\"glog(\" + n + \")\");\r\n            }\r\n\r\n            return LOG_TABLE[n];\r\n        };\r\n\r\n        _this.gexp = function (n) {\r\n\r\n            while (n < 0) {\r\n                n += 255;\r\n            }\r\n\r\n            while (n >= 256) {\r\n                n -= 255;\r\n            }\r\n\r\n            return EXP_TABLE[n];\r\n        };\r\n\r\n        return _this;\r\n    }();\r\n\r\n    var qrBitBuffer = function () {\r\n\r\n        var _buffer = new Array();\r\n        var _length = 0;\r\n\r\n        var _this = {};\r\n\r\n        _this.getBuffer = function () {\r\n            return _buffer;\r\n        };\r\n\r\n        _this.getAt = function (index) {\r\n            var bufIndex = Math.floor(index / 8);\r\n            return (_buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;\r\n        };\r\n\r\n        _this.put = function (num, length) {\r\n            for (var i = 0; i < length; i += 1) {\r\n                _this.putBit((num >>> length - i - 1 & 1) === 1);\r\n            }\r\n        };\r\n\r\n        _this.getLengthInBits = function () {\r\n            return _length;\r\n        };\r\n\r\n        _this.putBit = function (bit) {\r\n\r\n            var bufIndex = Math.floor(_length / 8);\r\n            if (_buffer.length <= bufIndex) {\r\n                _buffer.push(0);\r\n            }\r\n\r\n            if (bit) {\r\n                _buffer[bufIndex] |= 0x80 >>> _length % 8;\r\n            }\r\n\r\n            _length += 1;\r\n        };\r\n\r\n        return _this;\r\n    };\r\n\r\n    var qr8BitByte = function (data) {\r\n\r\n        var _mode = QRMode.MODE_8BIT_BYTE;\r\n        var _data = data;\r\n        var _bytes = stringToBytes(data);\r\n\r\n        var _this = {};\r\n\r\n        _this.getMode = function () {\r\n            return _mode;\r\n        };\r\n\r\n        _this.getLength = function (buffer) {\r\n            return _bytes.length;\r\n        };\r\n\r\n        _this.write = function (buffer) {\r\n            for (var i = 0; i < _bytes.length; i += 1) {\r\n                buffer.put(_bytes[i], 8);\r\n            }\r\n        };\r\n\r\n        return _this;\r\n    };\r\n\r\n    var QRMaskPattern = {\r\n        PATTERN000: 0,\r\n        PATTERN001: 1,\r\n        PATTERN010: 2,\r\n        PATTERN011: 3,\r\n        PATTERN100: 4,\r\n        PATTERN101: 5,\r\n        PATTERN110: 6,\r\n        PATTERN111: 7\r\n    };\r\n\r\n    var QRMode = {\r\n        MODE_NUMBER: 1 << 0,\r\n        MODE_ALPHA_NUM: 1 << 1,\r\n        MODE_8BIT_BYTE: 1 << 2,\r\n        MODE_KANJI: 1 << 3\r\n    };\r\n\r\n    var QRErrorCorrectLevel = {\r\n        L: 1,\r\n        M: 0,\r\n        Q: 3,\r\n        H: 2\r\n    };\r\n\r\n    var QRCodeLimitLength = [[17, 14, 11, 7], [32, 26, 20, 14], [53, 42, 32, 24], [78, 62, 46, 34], [106, 84, 60, 44], [134, 106, 74, 58], [154, 122, 86, 64], [192, 152, 108, 84], [230, 180, 130, 98], [271, 213, 151, 119], [321, 251, 177, 137], [367, 287, 203, 155], [425, 331, 241, 177], [458, 362, 258, 194], [520, 412, 292, 220], [586, 450, 322, 250], [644, 504, 364, 280], [718, 560, 394, 310], [792, 624, 442, 338], [858, 666, 482, 382], [929, 711, 509, 403], [1003, 779, 565, 439], [1091, 857, 611, 461], [1171, 911, 661, 511], [1273, 997, 715, 535], [1367, 1059, 751, 593], [1465, 1125, 805, 625], [1528, 1190, 868, 658], [1628, 1264, 908, 698], [1732, 1370, 982, 742], [1840, 1452, 1030, 790], [1952, 1538, 1112, 842], [2068, 1628, 1168, 898], [2188, 1722, 1228, 958], [2303, 1809, 1283, 983], [2431, 1911, 1351, 1051], [2563, 1989, 1423, 1093], [2699, 2099, 1499, 1139], [2809, 2213, 1579, 1219], [2953, 2331, 1663, 1273]];\r\n\r\n    var stringToBytes = function (s) {\r\n        var bytes = new Array();\r\n        for (var i = 0; i < s.length; i += 1) {\r\n            var c = s.charCodeAt(i);\r\n            bytes.push(c & 0xff);\r\n        }\r\n        return bytes;\r\n    };\r\n\r\n    var getModuleCount = function () {\r\n        return _moduleCount;\r\n    };\r\n\r\n    var isDark = function (row, col) {\r\n        if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\r\n            throw new Error(row + \",\" + col);\r\n        }\r\n        return _modules[row][col];\r\n    };\r\n\r\n    var addData = function (data) {\r\n        var newData = qr8BitByte(data);\r\n        _dataList.push(newData);\r\n        _dataCache = null;\r\n    };\r\n\r\n    var getUTF8Length = function (text) {\r\n        var replaced = encodeURI(text).toString().replace(/\\%[0-9a-fA-F]{2}/g, 'a');\r\n        return replaced.length + (replaced.length !== text ? 3 : 0);\r\n    };\r\n\r\n    var getTypeNumber = function (text) {\r\n        var length = getUTF8Length(text);\r\n        var type = 1;\r\n        for (var i = 0, len = QRCodeLimitLength.length; i < len; i++) {\r\n            var limit = 0;\r\n\r\n            switch (_errorCorrectLevel) {\r\n                case QRErrorCorrectLevel.L:\r\n                    limit = QRCodeLimitLength[i][0];\r\n                    break;\r\n                case QRErrorCorrectLevel.M:\r\n                    limit = QRCodeLimitLength[i][1];\r\n                    break;\r\n                case QRErrorCorrectLevel.Q:\r\n                    limit = QRCodeLimitLength[i][2];\r\n                    break;\r\n                case QRErrorCorrectLevel.H:\r\n                    limit = QRCodeLimitLength[i][3];\r\n                    break;\r\n            }\r\n\r\n            if (length <= limit)\r\n                break;\r\n            else\r\n                type++;\r\n        }\r\n\r\n        if (type > QRCodeLimitLength.length)\r\n            throw new Error(\"Data is too long\");\r\n\r\n        return type;\r\n    };\r\n\r\n    var draw = function () {\r\n        var count = getModuleCount(),\r\n            elements = [];\r\n\r\n        for (var x = 0; x < count; x++) {\r\n            for (var y = 0; y < count; y++) {\r\n                if (isDark(y, x))\r\n                    elements.push({ x: x, y: y });\r\n            }\r\n        }\r\n\r\n        return {\r\n            elements: elements,\r\n            count: count\r\n        };\r\n    };\r\n\r\n    QR.create = function (text) {\r\n        if (text === undefined)\r\n            return {\r\n                elements: [],\r\n                count: 0\r\n            };\r\n\r\n        _errorCorrectLevel = QRErrorCorrectLevel.M;\r\n        _typeNumber = getTypeNumber(text);\r\n        addData(text);\r\n        makeImpl(false, getBestMaskPattern());\r\n        return draw();\r\n    };\r\n})();","// HACK: we ask for $injector instead of $compile, to avoid circular dep\r\napp.factory(\"$templateCache\", [\"$cacheFactory\", $http, \"$injector\", function ($cacheFactory, $http, $injector) {\r\n    var cache = $cacheFactory(\"templates\");\r\n    var allTemplatePromise;\r\n\r\n    return {\r\n        get: function (url) {\r\n            var fromCache = cache.get(url);\r\n\r\n            // already have required template in the cache\r\n            if (fromCache) {\r\n                return fromCache;\r\n            }\r\n\r\n            // first template request ever - get the all template files\r\n            if (!allTemplatePromise) {\r\n                allTemplatePromise = $http.get(\"/Home/Templates\").then(function (response) {\r\n                    // compile the response, which will put everything into the cache\r\n                    $injector.get(\"$compile\")(response.data);\r\n                    return response;\r\n                });\r\n            }\r\n\r\n            // return the allTemplatePromise promise to all template requests\r\n            return allTemplatePromise.then(function (response) {\r\n                return {\r\n                    status: response.status,\r\n                    data: cache.get(url),\r\n                    headers: response.headers\r\n                };\r\n            });\r\n        },\r\n\r\n        put: function (key, value) {\r\n            cache.put(key, value);\r\n        }\r\n    };\r\n}]);\r\n","app.component(\"ngChat\", {\r\n    templateUrl: \"Components/Chat\",\r\n    controller: ChatController,\r\n    bindings: {}\r\n});","app.component(\"ngPost\", {\r\n    templateUrl: \"Components/Post\",\r\n    controller: PostController,\r\n    bindings: {\r\n        post: \"=\"\r\n    }\r\n});","app.component(\"ngQr\", {\r\n    templateUrl: \"Components/QR\",\r\n    controller: QRController,\r\n    bindings: {\r\n        text: \"=\"\r\n    }\r\n});","app.component(\"ngRegister\", {\r\n    templateUrl: \"Components/Register\",\r\n    controller: RegisterController,\r\n    bindings: { }\r\n});","app.controller(\"MainController\", [$scope, function ($scope) {\r\n    $scope.posts = [{ id: 1 }, { id: 2 }];\r\n}]);","﻿(function (angular, document, $scope, $http, undefined) {\r\n    // Globals\r\n    var app = angular.module(\"foraApp\", []);\r\n    // Content will be inserted below\r\n    app.run([$http, function ($http) {\r\n    // Set the X-Requested-With so that ASP Identity wont redirect us, and instead sends a plain 401.\r\n    $http.defaults.headers.common[\"X-Requested-With\"] = \"XMLHttpRequest\"; \r\n}]);\n/**\r\n * Based on;\r\n * https://github.com/kazuhikoarase/qrcode-generator/\r\n * https://github.com/davidshimjs/qrcodejs/\r\n * \r\n * Licensed under the MIT License;\r\n * http://www.opensource.org/licenses/mit-license.php\r\n * \r\n * The word \"QR Code\" is registered trademark of;\r\n * DENSO WAVE INCORPORATED\r\n * http://www.denso-wave.com/qrcode/faqpatent-e.html\r\n */\r\nvar QR = {};\r\n\r\n(function () {\r\n    var _this = {};\r\n\r\n    var PAD0 = 0xEC;\r\n    var PAD1 = 0x11;\r\n\r\n    var _typeNumber = 0;\r\n    var _errorCorrectLevel = 0;\r\n    var _modules = null;\r\n    var _moduleCount = 0;\r\n    var _dataCache = null;\r\n    var _dataList = new Array();\r\n\r\n    var makeImpl = function (test, maskPattern) {\r\n\r\n        _moduleCount = _typeNumber * 4 + 17;\r\n        _modules = function (moduleCount) {\r\n            var modules = new Array(moduleCount);\r\n            for (var row = 0; row < moduleCount; row += 1) {\r\n                modules[row] = new Array(moduleCount);\r\n                for (var col = 0; col < moduleCount; col += 1) {\r\n                    modules[row][col] = null;\r\n                }\r\n            }\r\n            return modules;\r\n        }(_moduleCount);\r\n\r\n        setupPositionProbePattern(0, 0);\r\n        setupPositionProbePattern(_moduleCount - 7, 0);\r\n        setupPositionProbePattern(0, _moduleCount - 7);\r\n        setupPositionAdjustPattern();\r\n        setupTimingPattern();\r\n        setupTypeInfo(test, maskPattern);\r\n\r\n        if (_typeNumber >= 7) {\r\n            setupTypeNumber(test);\r\n        }\r\n\r\n        if (_dataCache === null) {\r\n            _dataCache = createData(_typeNumber, _errorCorrectLevel, _dataList);\r\n        }\r\n\r\n        mapData(_dataCache, maskPattern);\r\n    };\r\n\r\n    var setupPositionProbePattern = function (row, col) {\r\n\r\n        for (var r = -1; r <= 7; r += 1) {\r\n\r\n            if (row + r <= -1 || _moduleCount <= row + r) continue;\r\n\r\n            for (var c = -1; c <= 7; c += 1) {\r\n\r\n                if (col + c <= -1 || _moduleCount <= col + c) continue;\r\n\r\n                if (0 <= r && r <= 6 && (c === 0 || c === 6)\r\n                    || 0 <= c && c <= 6 && (r === 0 || r === 6)\r\n                    || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\r\n                    _modules[row + r][col + c] = true;\r\n                } else {\r\n                    _modules[row + r][col + c] = false;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    var setupPositionAdjustPattern = function () {\r\n\r\n        var pos = QRUtil.getPatternPosition(_typeNumber);\r\n\r\n        for (var i = 0; i < pos.length; i += 1) {\r\n\r\n            for (var j = 0; j < pos.length; j += 1) {\r\n\r\n                var row = pos[i];\r\n                var col = pos[j];\r\n\r\n                if (_modules[row][col] !== null) {\r\n                    continue;\r\n                }\r\n\r\n                for (var r = -2; r <= 2; r += 1) {\r\n\r\n                    for (var c = -2; c <= 2; c += 1) {\r\n\r\n                        if (r === -2 || r === 2 || c === -2 || c === 2\r\n                            || r === 0 && c === 0) {\r\n                            _modules[row + r][col + c] = true;\r\n                        } else {\r\n                            _modules[row + r][col + c] = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    var getBestMaskPattern = function () {\r\n\r\n        var minLostPoint = 0;\r\n        var pattern = 0;\r\n\r\n        for (var i = 0; i < 8; i += 1) {\r\n\r\n            makeImpl(true, i);\r\n\r\n            var lostPoint = QRUtil.getLostPoint(_this);\r\n\r\n            if (i === 0 || minLostPoint > lostPoint) {\r\n                minLostPoint = lostPoint;\r\n                pattern = i;\r\n            }\r\n        }\r\n\r\n        return pattern;\r\n    };\r\n\r\n    var setupTimingPattern = function () {\r\n\r\n        for (var r = 8; r < _moduleCount - 8; r += 1) {\r\n            if (_modules[r][6] !== null) {\r\n                continue;\r\n            }\r\n            _modules[r][6] = r % 2 === 0;\r\n        }\r\n\r\n        for (var c = 8; c < _moduleCount - 8; c += 1) {\r\n            if (_modules[6][c] !== null) {\r\n                continue;\r\n            }\r\n            _modules[6][c] = c % 2 === 0;\r\n        }\r\n    };\r\n\r\n    var setupTypeInfo = function (test, maskPattern) {\r\n\r\n        var data = _errorCorrectLevel << 3 | maskPattern;\r\n        var bits = QRUtil.getBCHTypeInfo(data);\r\n\r\n        // vertical\r\n        for (var i = 0; i < 15; i += 1) {\r\n\r\n            var mod = !test && (bits >> i & 1) === 1;\r\n\r\n            if (i < 6) {\r\n                _modules[i][8] = mod;\r\n            } else if (i < 8) {\r\n                _modules[i + 1][8] = mod;\r\n            } else {\r\n                _modules[_moduleCount - 15 + i][8] = mod;\r\n            }\r\n        }\r\n\r\n        // horizontal\r\n        for (var i = 0; i < 15; i += 1) {\r\n\r\n            var mod = !test && (bits >> i & 1) === 1;\r\n\r\n            if (i < 8) {\r\n                _modules[8][_moduleCount - i - 1] = mod;\r\n            } else if (i < 9) {\r\n                _modules[8][15 - i - 1 + 1] = mod;\r\n            } else {\r\n                _modules[8][15 - i - 1] = mod;\r\n            }\r\n        }\r\n\r\n        // fixed module\r\n        _modules[_moduleCount - 8][8] = !test;\r\n    };\r\n\r\n    var setupTypeNumber = function (test) {\r\n\r\n        var bits = QRUtil.getBCHTypeNumber(_typeNumber);\r\n\r\n        for (var i = 0; i < 18; i += 1) {\r\n            var mod = !test && (bits >> i & 1) === 1;\r\n            _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\r\n        }\r\n\r\n        for (var i = 0; i < 18; i += 1) {\r\n            var mod = !test && (bits >> i & 1) === 1;\r\n            _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\r\n        }\r\n    };\r\n\r\n    var createBytes = function (buffer, rsBlocks) {\r\n\r\n        var offset = 0;\r\n\r\n        var maxDcCount = 0;\r\n        var maxEcCount = 0;\r\n\r\n        var dcdata = new Array(rsBlocks.length);\r\n        var ecdata = new Array(rsBlocks.length);\r\n\r\n        for (var r = 0; r < rsBlocks.length; r += 1) {\r\n\r\n            var dcCount = rsBlocks[r].dataCount;\r\n            var ecCount = rsBlocks[r].totalCount - dcCount;\r\n\r\n            maxDcCount = Math.max(maxDcCount, dcCount);\r\n            maxEcCount = Math.max(maxEcCount, ecCount);\r\n\r\n            dcdata[r] = new Array(dcCount);\r\n\r\n            for (var i = 0; i < dcdata[r].length; i += 1) {\r\n                dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\r\n            }\r\n            offset += dcCount;\r\n\r\n            var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\r\n            var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\r\n\r\n            var modPoly = rawPoly.mod(rsPoly);\r\n            ecdata[r] = new Array(rsPoly.getLength() - 1);\r\n            for (var i = 0; i < ecdata[r].length; i += 1) {\r\n                var modIndex = i + modPoly.getLength() - ecdata[r].length;\r\n                ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\r\n            }\r\n        }\r\n\r\n        var totalCodeCount = 0;\r\n        for (var i = 0; i < rsBlocks.length; i += 1) {\r\n            totalCodeCount += rsBlocks[i].totalCount;\r\n        }\r\n\r\n        var data = new Array(totalCodeCount);\r\n        var index = 0;\r\n\r\n        for (var i = 0; i < maxDcCount; i += 1) {\r\n            for (var r = 0; r < rsBlocks.length; r += 1) {\r\n                if (i < dcdata[r].length) {\r\n                    data[index] = dcdata[r][i];\r\n                    index += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i = 0; i < maxEcCount; i += 1) {\r\n            for (var r = 0; r < rsBlocks.length; r += 1) {\r\n                if (i < ecdata[r].length) {\r\n                    data[index] = ecdata[r][i];\r\n                    index += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return data;\r\n    };\r\n\r\n    var createData = function (typeNumber, errorCorrectLevel, dataList) {\r\n\r\n        var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\r\n\r\n        var buffer = qrBitBuffer();\r\n\r\n        for (var i = 0; i < dataList.length; i += 1) {\r\n            var data = dataList[i];\r\n            buffer.put(data.getMode(), 4);\r\n            buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\r\n            data.write(buffer);\r\n        }\r\n\r\n        // calc num max data.\r\n        var totalDataCount = 0;\r\n        for (var i = 0; i < rsBlocks.length; i += 1) {\r\n            totalDataCount += rsBlocks[i].dataCount;\r\n        }\r\n\r\n        if (buffer.getLengthInBits() > totalDataCount * 8) {\r\n            throw new Error(\"code length overflow. (\"\r\n              + buffer.getLengthInBits()\r\n              + \">\"\r\n              + totalDataCount * 8\r\n              + \")\");\r\n        }\r\n\r\n        // end code\r\n        if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\r\n            buffer.put(0, 4);\r\n        }\r\n\r\n        // padding\r\n        while (buffer.getLengthInBits() % 8 !== 0) {\r\n            buffer.putBit(false);\r\n        }\r\n\r\n        // padding\r\n        while (buffer.getLengthInBits() < totalDataCount * 8) {\r\n            buffer.put(PAD0, 8);\r\n\r\n            if (buffer.getLengthInBits() >= totalDataCount * 8) {\r\n                break;\r\n            }\r\n            buffer.put(PAD1, 8);\r\n        }\r\n\r\n        return createBytes(buffer, rsBlocks);\r\n    };\r\n\r\n    var mapData = function (data, maskPattern) {\r\n\r\n        var inc = -1;\r\n        var row = _moduleCount - 1;\r\n        var bitIndex = 7;\r\n        var byteIndex = 0;\r\n        var maskFunc = QRUtil.getMaskFunction(maskPattern);\r\n\r\n        for (var col = _moduleCount - 1; col > 0; col -= 2) {\r\n\r\n            if (col === 6) col -= 1;\r\n\r\n            while (true) {\r\n\r\n                for (var c = 0; c < 2; c += 1) {\r\n\r\n                    if (_modules[row][col - c] === null) {\r\n\r\n                        var dark = false;\r\n\r\n                        if (byteIndex < data.length)\r\n                            dark = (data[byteIndex] >>> bitIndex & 1) === 1;\r\n\r\n                        var mask = maskFunc(row, col - c);\r\n\r\n                        if (mask) {\r\n                            dark = !dark;\r\n                        }\r\n\r\n                        _modules[row][col - c] = dark;\r\n                        bitIndex -= 1;\r\n\r\n                        if (bitIndex === -1) {\r\n                            byteIndex += 1;\r\n                            bitIndex = 7;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                row += inc;\r\n\r\n                if (row < 0 || _moduleCount <= row) {\r\n                    row -= inc;\r\n                    inc = -inc;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    var qrPolynomial = function (num, shift) {\r\n\r\n        if (typeof num.length === undefined) {\r\n            throw new Error(num.length + \"/\" + shift);\r\n        }\r\n\r\n        var _num = function () {\r\n            var offset = 0;\r\n            while (offset < num.length && num[offset] === 0) {\r\n                offset += 1;\r\n            }\r\n            var _num = new Array(num.length - offset + shift);\r\n            for (var i = 0; i < num.length - offset; i += 1) {\r\n                _num[i] = num[i + offset];\r\n            }\r\n            return _num;\r\n        }();\r\n\r\n        var _this = {};\r\n\r\n        _this.getAt = function (index) {\r\n            return _num[index];\r\n        };\r\n\r\n        _this.getLength = function () {\r\n            return _num.length;\r\n        };\r\n\r\n        _this.multiply = function (e) {\r\n\r\n            var num = new Array(_this.getLength() + e.getLength() - 1);\r\n\r\n            for (var i = 0; i < _this.getLength(); i += 1) {\r\n                for (var j = 0; j < e.getLength(); j += 1) {\r\n                    num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)));\r\n                }\r\n            }\r\n\r\n            return qrPolynomial(num, 0);\r\n        };\r\n\r\n        _this.mod = function (e) {\r\n\r\n            if (_this.getLength() - e.getLength() < 0) {\r\n                return _this;\r\n            }\r\n\r\n            var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0));\r\n\r\n            var num = new Array(_this.getLength());\r\n            for (var i = 0; i < _this.getLength(); i += 1) {\r\n                num[i] = _this.getAt(i);\r\n            }\r\n\r\n            for (var i = 0; i < e.getLength(); i += 1) {\r\n                num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio);\r\n            }\r\n\r\n            // recursive call\r\n            return qrPolynomial(num, 0).mod(e);\r\n        };\r\n\r\n        return _this;\r\n    };\r\n\r\n    var QRUtil = function () {\r\n\r\n        var PATTERN_POSITION_TABLE = [\r\n          [],\r\n          [6, 18],\r\n          [6, 22],\r\n          [6, 26],\r\n          [6, 30],\r\n          [6, 34],\r\n          [6, 22, 38],\r\n          [6, 24, 42],\r\n          [6, 26, 46],\r\n          [6, 28, 50],\r\n          [6, 30, 54],\r\n          [6, 32, 58],\r\n          [6, 34, 62],\r\n          [6, 26, 46, 66],\r\n          [6, 26, 48, 70],\r\n          [6, 26, 50, 74],\r\n          [6, 30, 54, 78],\r\n          [6, 30, 56, 82],\r\n          [6, 30, 58, 86],\r\n          [6, 34, 62, 90],\r\n          [6, 28, 50, 72, 94],\r\n          [6, 26, 50, 74, 98],\r\n          [6, 30, 54, 78, 102],\r\n          [6, 28, 54, 80, 106],\r\n          [6, 32, 58, 84, 110],\r\n          [6, 30, 58, 86, 114],\r\n          [6, 34, 62, 90, 118],\r\n          [6, 26, 50, 74, 98, 122],\r\n          [6, 30, 54, 78, 102, 126],\r\n          [6, 26, 52, 78, 104, 130],\r\n          [6, 30, 56, 82, 108, 134],\r\n          [6, 34, 60, 86, 112, 138],\r\n          [6, 30, 58, 86, 114, 142],\r\n          [6, 34, 62, 90, 118, 146],\r\n          [6, 30, 54, 78, 102, 126, 150],\r\n          [6, 24, 50, 76, 102, 128, 154],\r\n          [6, 28, 54, 80, 106, 132, 158],\r\n          [6, 32, 58, 84, 110, 136, 162],\r\n          [6, 26, 54, 82, 110, 138, 166],\r\n          [6, 30, 58, 86, 114, 142, 170]\r\n        ];\r\n        var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\r\n        var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\r\n        var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\r\n\r\n        var _this = {};\r\n\r\n        var getBCHDigit = function (data) {\r\n            var digit = 0;\r\n            while (data !== 0) {\r\n                digit += 1;\r\n                data >>>= 1;\r\n            }\r\n            return digit;\r\n        };\r\n\r\n        _this.getBCHTypeInfo = function (data) {\r\n            var d = data << 10;\r\n            while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\r\n                d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);\r\n            }\r\n            return (data << 10 | d) ^ G15_MASK;\r\n        };\r\n\r\n        _this.getBCHTypeNumber = function (data) {\r\n            var d = data << 12;\r\n            while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\r\n                d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);\r\n            }\r\n            return data << 12 | d;\r\n        };\r\n\r\n        _this.getPatternPosition = function (typeNumber) {\r\n            return PATTERN_POSITION_TABLE[typeNumber - 1];\r\n        };\r\n\r\n        _this.getMaskFunction = function (maskPattern) {\r\n\r\n            switch (maskPattern) {\r\n\r\n                case QRMaskPattern.PATTERN000:\r\n                    return function (i, j) { return (i + j) % 2 === 0; };\r\n                case QRMaskPattern.PATTERN001:\r\n                    return function (i, j) { return i % 2 === 0; };\r\n                case QRMaskPattern.PATTERN010:\r\n                    return function (i, j) { return j % 3 === 0; };\r\n                case QRMaskPattern.PATTERN011:\r\n                    return function (i, j) { return (i + j) % 3 === 0; };\r\n                case QRMaskPattern.PATTERN100:\r\n                    return function (i, j) { return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0; };\r\n                case QRMaskPattern.PATTERN101:\r\n                    return function (i, j) { return i * j % 2 + i * j % 3 === 0; };\r\n                case QRMaskPattern.PATTERN110:\r\n                    return function (i, j) { return (i * j % 2 + i * j % 3) % 2 === 0; };\r\n                case QRMaskPattern.PATTERN111:\r\n                    return function (i, j) { return (i * j % 3 + (i + j) % 2) % 2 === 0; };\r\n\r\n                default:\r\n                    throw new Error(\"bad maskPattern:\" + maskPattern);\r\n            }\r\n        };\r\n\r\n        _this.getErrorCorrectPolynomial = function (errorCorrectLength) {\r\n            var a = qrPolynomial([1], 0);\r\n            for (var i = 0; i < errorCorrectLength; i += 1) {\r\n                a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0));\r\n            }\r\n            return a;\r\n        };\r\n\r\n        _this.getLengthInBits = function (mode, type) {\r\n\r\n            if (1 <= type && type < 10) {\r\n\r\n                // 1 - 9\r\n\r\n                switch (mode) {\r\n                    case QRMode.MODE_NUMBER: return 10;\r\n                    case QRMode.MODE_ALPHA_NUM: return 9;\r\n                    case QRMode.MODE_8BIT_BYTE: return 8;\r\n                    case QRMode.MODE_KANJI: return 8;\r\n                    default:\r\n                        throw new Error(\"mode:\" + mode);\r\n                }\r\n\r\n            } else if (type < 27) {\r\n\r\n                // 10 - 26\r\n\r\n                switch (mode) {\r\n                    case QRMode.MODE_NUMBER: return 12;\r\n                    case QRMode.MODE_ALPHA_NUM: return 11;\r\n                    case QRMode.MODE_8BIT_BYTE: return 16;\r\n                    case QRMode.MODE_KANJI: return 10;\r\n                    default:\r\n                        throw new Error(\"mode:\" + mode);\r\n                }\r\n\r\n            } else if (type < 41) {\r\n\r\n                // 27 - 40\r\n\r\n                switch (mode) {\r\n                    case QRMode.MODE_NUMBER: return 14;\r\n                    case QRMode.MODE_ALPHA_NUM: return 13;\r\n                    case QRMode.MODE_8BIT_BYTE: return 16;\r\n                    case QRMode.MODE_KANJI: return 12;\r\n                    default:\r\n                        throw new Error(\"mode:\" + mode);\r\n                }\r\n\r\n            } else {\r\n                throw new Error(\"type:\" + type);\r\n            }\r\n        };\r\n\r\n        _this.getLostPoint = function (qrcode) {\r\n\r\n            var moduleCount = getModuleCount();\r\n\r\n            var lostPoint = 0;\r\n\r\n            // LEVEL1\r\n\r\n            for (var row = 0; row < moduleCount; row += 1) {\r\n                for (var col = 0; col < moduleCount; col += 1) {\r\n\r\n                    var sameCount = 0;\r\n                    var dark = isDark(row, col);\r\n\r\n                    for (var r = -1; r <= 1; r += 1) {\r\n\r\n                        if (row + r < 0 || moduleCount <= row + r) {\r\n                            continue;\r\n                        }\r\n\r\n                        for (var c = -1; c <= 1; c += 1) {\r\n\r\n                            if (col + c < 0 || moduleCount <= col + c) {\r\n                                continue;\r\n                            }\r\n\r\n                            if (r === 0 && c === 0) {\r\n                                continue;\r\n                            }\r\n\r\n                            if (dark === isDark(row + r, col + c)) {\r\n                                sameCount += 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (sameCount > 5) {\r\n                        lostPoint += 3 + sameCount - 5;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // LEVEL2\r\n\r\n            for (var row = 0; row < moduleCount - 1; row += 1) {\r\n                for (var col = 0; col < moduleCount - 1; col += 1) {\r\n                    var count = 0;\r\n                    if (isDark(row, col)) count += 1;\r\n                    if (isDark(row + 1, col)) count += 1;\r\n                    if (isDark(row, col + 1)) count += 1;\r\n                    if (isDark(row + 1, col + 1)) count += 1;\r\n                    if (count === 0 || count === 4) {\r\n                        lostPoint += 3;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // LEVEL3\r\n\r\n            for (var row = 0; row < moduleCount; row += 1) {\r\n                for (var col = 0; col < moduleCount - 6; col += 1) {\r\n                    if (isDark(row, col)\r\n                        && !isDark(row, col + 1)\r\n                        && isDark(row, col + 2)\r\n                        && isDark(row, col + 3)\r\n                        && isDark(row, col + 4)\r\n                        && !isDark(row, col + 5)\r\n                        && isDark(row, col + 6)) {\r\n                        lostPoint += 40;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (var col = 0; col < moduleCount; col += 1) {\r\n                for (var row = 0; row < moduleCount - 6; row += 1) {\r\n                    if (isDark(row, col)\r\n                        && !isDark(row + 1, col)\r\n                        && isDark(row + 2, col)\r\n                        && isDark(row + 3, col)\r\n                        && isDark(row + 4, col)\r\n                        && !isDark(row + 5, col)\r\n                        && isDark(row + 6, col)) {\r\n                        lostPoint += 40;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // LEVEL4\r\n\r\n            var darkCount = 0;\r\n\r\n            for (var col = 0; col < moduleCount; col += 1) {\r\n                for (var row = 0; row < moduleCount; row += 1) {\r\n                    if (isDark(row, col)) {\r\n                        darkCount += 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\r\n            lostPoint += ratio * 10;\r\n\r\n            return lostPoint;\r\n        };\r\n\r\n        return _this;\r\n    }();\r\n\r\n    var QRRSBlock = function () {\r\n\r\n        var RS_BLOCK_TABLE = [\r\n\r\n          // L\r\n          // M\r\n          // Q\r\n          // H\r\n\r\n          // 1\r\n          [1, 26, 19],\r\n          [1, 26, 16],\r\n          [1, 26, 13],\r\n          [1, 26, 9],\r\n\r\n          // 2\r\n          [1, 44, 34],\r\n          [1, 44, 28],\r\n          [1, 44, 22],\r\n          [1, 44, 16],\r\n\r\n          // 3\r\n          [1, 70, 55],\r\n          [1, 70, 44],\r\n          [2, 35, 17],\r\n          [2, 35, 13],\r\n\r\n          // 4\r\n          [1, 100, 80],\r\n          [2, 50, 32],\r\n          [2, 50, 24],\r\n          [4, 25, 9],\r\n\r\n          // 5\r\n          [1, 134, 108],\r\n          [2, 67, 43],\r\n          [2, 33, 15, 2, 34, 16],\r\n          [2, 33, 11, 2, 34, 12],\r\n\r\n          // 6\r\n          [2, 86, 68],\r\n          [4, 43, 27],\r\n          [4, 43, 19],\r\n          [4, 43, 15],\r\n\r\n          // 7\r\n          [2, 98, 78],\r\n          [4, 49, 31],\r\n          [2, 32, 14, 4, 33, 15],\r\n          [4, 39, 13, 1, 40, 14],\r\n\r\n          // 8\r\n          [2, 121, 97],\r\n          [2, 60, 38, 2, 61, 39],\r\n          [4, 40, 18, 2, 41, 19],\r\n          [4, 40, 14, 2, 41, 15],\r\n\r\n          // 9\r\n          [2, 146, 116],\r\n          [3, 58, 36, 2, 59, 37],\r\n          [4, 36, 16, 4, 37, 17],\r\n          [4, 36, 12, 4, 37, 13],\r\n\r\n          // 10\r\n          [2, 86, 68, 2, 87, 69],\r\n          [4, 69, 43, 1, 70, 44],\r\n          [6, 43, 19, 2, 44, 20],\r\n          [6, 43, 15, 2, 44, 16],\r\n\r\n          // 11\r\n          [4, 101, 81],\r\n          [1, 80, 50, 4, 81, 51],\r\n          [4, 50, 22, 4, 51, 23],\r\n          [3, 36, 12, 8, 37, 13],\r\n\r\n          // 12\r\n          [2, 116, 92, 2, 117, 93],\r\n          [6, 58, 36, 2, 59, 37],\r\n          [4, 46, 20, 6, 47, 21],\r\n          [7, 42, 14, 4, 43, 15],\r\n\r\n          // 13\r\n          [4, 133, 107],\r\n          [8, 59, 37, 1, 60, 38],\r\n          [8, 44, 20, 4, 45, 21],\r\n          [12, 33, 11, 4, 34, 12],\r\n\r\n          // 14\r\n          [3, 145, 115, 1, 146, 116],\r\n          [4, 64, 40, 5, 65, 41],\r\n          [11, 36, 16, 5, 37, 17],\r\n          [11, 36, 12, 5, 37, 13],\r\n\r\n          // 15\r\n          [5, 109, 87, 1, 110, 88],\r\n          [5, 65, 41, 5, 66, 42],\r\n          [5, 54, 24, 7, 55, 25],\r\n          [11, 36, 12, 7, 37, 13],\r\n\r\n          // 16\r\n          [5, 122, 98, 1, 123, 99],\r\n          [7, 73, 45, 3, 74, 46],\r\n          [15, 43, 19, 2, 44, 20],\r\n          [3, 45, 15, 13, 46, 16],\r\n\r\n          // 17\r\n          [1, 135, 107, 5, 136, 108],\r\n          [10, 74, 46, 1, 75, 47],\r\n          [1, 50, 22, 15, 51, 23],\r\n          [2, 42, 14, 17, 43, 15],\r\n\r\n          // 18\r\n          [5, 150, 120, 1, 151, 121],\r\n          [9, 69, 43, 4, 70, 44],\r\n          [17, 50, 22, 1, 51, 23],\r\n          [2, 42, 14, 19, 43, 15],\r\n\r\n          // 19\r\n          [3, 141, 113, 4, 142, 114],\r\n          [3, 70, 44, 11, 71, 45],\r\n          [17, 47, 21, 4, 48, 22],\r\n          [9, 39, 13, 16, 40, 14],\r\n\r\n          // 20\r\n          [3, 135, 107, 5, 136, 108],\r\n          [3, 67, 41, 13, 68, 42],\r\n          [15, 54, 24, 5, 55, 25],\r\n          [15, 43, 15, 10, 44, 16],\r\n\r\n          // 21\r\n          [4, 144, 116, 4, 145, 117],\r\n          [17, 68, 42],\r\n          [17, 50, 22, 6, 51, 23],\r\n          [19, 46, 16, 6, 47, 17],\r\n\r\n          // 22\r\n          [2, 139, 111, 7, 140, 112],\r\n          [17, 74, 46],\r\n          [7, 54, 24, 16, 55, 25],\r\n          [34, 37, 13],\r\n\r\n          // 23\r\n          [4, 151, 121, 5, 152, 122],\r\n          [4, 75, 47, 14, 76, 48],\r\n          [11, 54, 24, 14, 55, 25],\r\n          [16, 45, 15, 14, 46, 16],\r\n\r\n          // 24\r\n          [6, 147, 117, 4, 148, 118],\r\n          [6, 73, 45, 14, 74, 46],\r\n          [11, 54, 24, 16, 55, 25],\r\n          [30, 46, 16, 2, 47, 17],\r\n\r\n          // 25\r\n          [8, 132, 106, 4, 133, 107],\r\n          [8, 75, 47, 13, 76, 48],\r\n          [7, 54, 24, 22, 55, 25],\r\n          [22, 45, 15, 13, 46, 16],\r\n\r\n          // 26\r\n          [10, 142, 114, 2, 143, 115],\r\n          [19, 74, 46, 4, 75, 47],\r\n          [28, 50, 22, 6, 51, 23],\r\n          [33, 46, 16, 4, 47, 17],\r\n\r\n          // 27\r\n          [8, 152, 122, 4, 153, 123],\r\n          [22, 73, 45, 3, 74, 46],\r\n          [8, 53, 23, 26, 54, 24],\r\n          [12, 45, 15, 28, 46, 16],\r\n\r\n          // 28\r\n          [3, 147, 117, 10, 148, 118],\r\n          [3, 73, 45, 23, 74, 46],\r\n          [4, 54, 24, 31, 55, 25],\r\n          [11, 45, 15, 31, 46, 16],\r\n\r\n          // 29\r\n          [7, 146, 116, 7, 147, 117],\r\n          [21, 73, 45, 7, 74, 46],\r\n          [1, 53, 23, 37, 54, 24],\r\n          [19, 45, 15, 26, 46, 16],\r\n\r\n          // 30\r\n          [5, 145, 115, 10, 146, 116],\r\n          [19, 75, 47, 10, 76, 48],\r\n          [15, 54, 24, 25, 55, 25],\r\n          [23, 45, 15, 25, 46, 16],\r\n\r\n          // 31\r\n          [13, 145, 115, 3, 146, 116],\r\n          [2, 74, 46, 29, 75, 47],\r\n          [42, 54, 24, 1, 55, 25],\r\n          [23, 45, 15, 28, 46, 16],\r\n\r\n          // 32\r\n          [17, 145, 115],\r\n          [10, 74, 46, 23, 75, 47],\r\n          [10, 54, 24, 35, 55, 25],\r\n          [19, 45, 15, 35, 46, 16],\r\n\r\n          // 33\r\n          [17, 145, 115, 1, 146, 116],\r\n          [14, 74, 46, 21, 75, 47],\r\n          [29, 54, 24, 19, 55, 25],\r\n          [11, 45, 15, 46, 46, 16],\r\n\r\n          // 34\r\n          [13, 145, 115, 6, 146, 116],\r\n          [14, 74, 46, 23, 75, 47],\r\n          [44, 54, 24, 7, 55, 25],\r\n          [59, 46, 16, 1, 47, 17],\r\n\r\n          // 35\r\n          [12, 151, 121, 7, 152, 122],\r\n          [12, 75, 47, 26, 76, 48],\r\n          [39, 54, 24, 14, 55, 25],\r\n          [22, 45, 15, 41, 46, 16],\r\n\r\n          // 36\r\n          [6, 151, 121, 14, 152, 122],\r\n          [6, 75, 47, 34, 76, 48],\r\n          [46, 54, 24, 10, 55, 25],\r\n          [2, 45, 15, 64, 46, 16],\r\n\r\n          // 37\r\n          [17, 152, 122, 4, 153, 123],\r\n          [29, 74, 46, 14, 75, 47],\r\n          [49, 54, 24, 10, 55, 25],\r\n          [24, 45, 15, 46, 46, 16],\r\n\r\n          // 38\r\n          [4, 152, 122, 18, 153, 123],\r\n          [13, 74, 46, 32, 75, 47],\r\n          [48, 54, 24, 14, 55, 25],\r\n          [42, 45, 15, 32, 46, 16],\r\n\r\n          // 39\r\n          [20, 147, 117, 4, 148, 118],\r\n          [40, 75, 47, 7, 76, 48],\r\n          [43, 54, 24, 22, 55, 25],\r\n          [10, 45, 15, 67, 46, 16],\r\n\r\n          // 40\r\n          [19, 148, 118, 6, 149, 119],\r\n          [18, 75, 47, 31, 76, 48],\r\n          [34, 54, 24, 34, 55, 25],\r\n          [20, 45, 15, 61, 46, 16]\r\n        ];\r\n\r\n        var qrRSBlock = function (totalCount, dataCount) {\r\n            var _this = {};\r\n            _this.totalCount = totalCount;\r\n            _this.dataCount = dataCount;\r\n            return _this;\r\n        };\r\n\r\n        var _this = {};\r\n\r\n        var getRsBlockTable = function (typeNumber, errorCorrectLevel) {\r\n\r\n            switch (errorCorrectLevel) {\r\n                case QRErrorCorrectLevel.L:\r\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\r\n                case QRErrorCorrectLevel.M:\r\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\r\n                case QRErrorCorrectLevel.Q:\r\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\r\n                case QRErrorCorrectLevel.H:\r\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\r\n                default:\r\n                    return undefined;\r\n            }\r\n        };\r\n\r\n        _this.getRSBlocks = function (typeNumber, errorCorrectLevel) {\r\n\r\n            var rsBlock = getRsBlockTable(typeNumber, errorCorrectLevel);\r\n\r\n            if (typeof rsBlock === undefined) {\r\n                throw new Error(\"bad rs block @ typeNumber:\" + typeNumber +\r\n                    \"/errorCorrectLevel:\" + errorCorrectLevel);\r\n            }\r\n\r\n            var length = rsBlock.length / 3;\r\n\r\n            var list = new Array();\r\n\r\n            for (var i = 0; i < length; i += 1) {\r\n\r\n                var count = rsBlock[i * 3 + 0];\r\n                var totalCount = rsBlock[i * 3 + 1];\r\n                var dataCount = rsBlock[i * 3 + 2];\r\n\r\n                for (var j = 0; j < count; j += 1) {\r\n                    list.push(qrRSBlock(totalCount, dataCount));\r\n                }\r\n            }\r\n\r\n            return list;\r\n        };\r\n\r\n        return _this;\r\n    }();\r\n\r\n    var EXP_TABLE = new Array(256);\r\n    var LOG_TABLE = new Array(256);\r\n    var QRMath = function () {\r\n        // initialize tables\r\n        for (var i = 0; i < 8; i += 1) {\r\n            EXP_TABLE[i] = 1 << i;\r\n        }\r\n        for (var i = 8; i < 256; i += 1) {\r\n            EXP_TABLE[i] = EXP_TABLE[i - 4]\r\n              ^ EXP_TABLE[i - 5]\r\n              ^ EXP_TABLE[i - 6]\r\n              ^ EXP_TABLE[i - 8];\r\n        }\r\n        for (var i = 0; i < 255; i += 1) {\r\n            LOG_TABLE[EXP_TABLE[i]] = i;\r\n        }\r\n\r\n        var _this = {};\r\n\r\n        _this.glog = function (n) {\r\n\r\n            if (n < 1) {\r\n                throw new Error(\"glog(\" + n + \")\");\r\n            }\r\n\r\n            return LOG_TABLE[n];\r\n        };\r\n\r\n        _this.gexp = function (n) {\r\n\r\n            while (n < 0) {\r\n                n += 255;\r\n            }\r\n\r\n            while (n >= 256) {\r\n                n -= 255;\r\n            }\r\n\r\n            return EXP_TABLE[n];\r\n        };\r\n\r\n        return _this;\r\n    }();\r\n\r\n    var qrBitBuffer = function () {\r\n\r\n        var _buffer = new Array();\r\n        var _length = 0;\r\n\r\n        var _this = {};\r\n\r\n        _this.getBuffer = function () {\r\n            return _buffer;\r\n        };\r\n\r\n        _this.getAt = function (index) {\r\n            var bufIndex = Math.floor(index / 8);\r\n            return (_buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;\r\n        };\r\n\r\n        _this.put = function (num, length) {\r\n            for (var i = 0; i < length; i += 1) {\r\n                _this.putBit((num >>> length - i - 1 & 1) === 1);\r\n            }\r\n        };\r\n\r\n        _this.getLengthInBits = function () {\r\n            return _length;\r\n        };\r\n\r\n        _this.putBit = function (bit) {\r\n\r\n            var bufIndex = Math.floor(_length / 8);\r\n            if (_buffer.length <= bufIndex) {\r\n                _buffer.push(0);\r\n            }\r\n\r\n            if (bit) {\r\n                _buffer[bufIndex] |= 0x80 >>> _length % 8;\r\n            }\r\n\r\n            _length += 1;\r\n        };\r\n\r\n        return _this;\r\n    };\r\n\r\n    var qr8BitByte = function (data) {\r\n\r\n        var _mode = QRMode.MODE_8BIT_BYTE;\r\n        var _data = data;\r\n        var _bytes = stringToBytes(data);\r\n\r\n        var _this = {};\r\n\r\n        _this.getMode = function () {\r\n            return _mode;\r\n        };\r\n\r\n        _this.getLength = function (buffer) {\r\n            return _bytes.length;\r\n        };\r\n\r\n        _this.write = function (buffer) {\r\n            for (var i = 0; i < _bytes.length; i += 1) {\r\n                buffer.put(_bytes[i], 8);\r\n            }\r\n        };\r\n\r\n        return _this;\r\n    };\r\n\r\n    var QRMaskPattern = {\r\n        PATTERN000: 0,\r\n        PATTERN001: 1,\r\n        PATTERN010: 2,\r\n        PATTERN011: 3,\r\n        PATTERN100: 4,\r\n        PATTERN101: 5,\r\n        PATTERN110: 6,\r\n        PATTERN111: 7\r\n    };\r\n\r\n    var QRMode = {\r\n        MODE_NUMBER: 1 << 0,\r\n        MODE_ALPHA_NUM: 1 << 1,\r\n        MODE_8BIT_BYTE: 1 << 2,\r\n        MODE_KANJI: 1 << 3\r\n    };\r\n\r\n    var QRErrorCorrectLevel = {\r\n        L: 1,\r\n        M: 0,\r\n        Q: 3,\r\n        H: 2\r\n    };\r\n\r\n    var QRCodeLimitLength = [[17, 14, 11, 7], [32, 26, 20, 14], [53, 42, 32, 24], [78, 62, 46, 34], [106, 84, 60, 44], [134, 106, 74, 58], [154, 122, 86, 64], [192, 152, 108, 84], [230, 180, 130, 98], [271, 213, 151, 119], [321, 251, 177, 137], [367, 287, 203, 155], [425, 331, 241, 177], [458, 362, 258, 194], [520, 412, 292, 220], [586, 450, 322, 250], [644, 504, 364, 280], [718, 560, 394, 310], [792, 624, 442, 338], [858, 666, 482, 382], [929, 711, 509, 403], [1003, 779, 565, 439], [1091, 857, 611, 461], [1171, 911, 661, 511], [1273, 997, 715, 535], [1367, 1059, 751, 593], [1465, 1125, 805, 625], [1528, 1190, 868, 658], [1628, 1264, 908, 698], [1732, 1370, 982, 742], [1840, 1452, 1030, 790], [1952, 1538, 1112, 842], [2068, 1628, 1168, 898], [2188, 1722, 1228, 958], [2303, 1809, 1283, 983], [2431, 1911, 1351, 1051], [2563, 1989, 1423, 1093], [2699, 2099, 1499, 1139], [2809, 2213, 1579, 1219], [2953, 2331, 1663, 1273]];\r\n\r\n    var stringToBytes = function (s) {\r\n        var bytes = new Array();\r\n        for (var i = 0; i < s.length; i += 1) {\r\n            var c = s.charCodeAt(i);\r\n            bytes.push(c & 0xff);\r\n        }\r\n        return bytes;\r\n    };\r\n\r\n    var getModuleCount = function () {\r\n        return _moduleCount;\r\n    };\r\n\r\n    var isDark = function (row, col) {\r\n        if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\r\n            throw new Error(row + \",\" + col);\r\n        }\r\n        return _modules[row][col];\r\n    };\r\n\r\n    var addData = function (data) {\r\n        var newData = qr8BitByte(data);\r\n        _dataList.push(newData);\r\n        _dataCache = null;\r\n    };\r\n\r\n    var getUTF8Length = function (text) {\r\n        var replaced = encodeURI(text).toString().replace(/\\%[0-9a-fA-F]{2}/g, 'a');\r\n        return replaced.length + (replaced.length !== text ? 3 : 0);\r\n    };\r\n\r\n    var getTypeNumber = function (text) {\r\n        var length = getUTF8Length(text);\r\n        var type = 1;\r\n        for (var i = 0, len = QRCodeLimitLength.length; i < len; i++) {\r\n            var limit = 0;\r\n\r\n            switch (_errorCorrectLevel) {\r\n                case QRErrorCorrectLevel.L:\r\n                    limit = QRCodeLimitLength[i][0];\r\n                    break;\r\n                case QRErrorCorrectLevel.M:\r\n                    limit = QRCodeLimitLength[i][1];\r\n                    break;\r\n                case QRErrorCorrectLevel.Q:\r\n                    limit = QRCodeLimitLength[i][2];\r\n                    break;\r\n                case QRErrorCorrectLevel.H:\r\n                    limit = QRCodeLimitLength[i][3];\r\n                    break;\r\n            }\r\n\r\n            if (length <= limit)\r\n                break;\r\n            else\r\n                type++;\r\n        }\r\n\r\n        if (type > QRCodeLimitLength.length)\r\n            throw new Error(\"Data is too long\");\r\n\r\n        return type;\r\n    };\r\n\r\n    var draw = function () {\r\n        var count = getModuleCount(),\r\n            elements = [];\r\n\r\n        for (var x = 0; x < count; x++) {\r\n            for (var y = 0; y < count; y++) {\r\n                if (isDark(y, x))\r\n                    elements.push({ x: x, y: y });\r\n            }\r\n        }\r\n\r\n        return {\r\n            elements: elements,\r\n            count: count\r\n        };\r\n    };\r\n\r\n    QR.create = function (text) {\r\n        if (text === undefined)\r\n            return {\r\n                elements: [],\r\n                count: 0\r\n            };\r\n\r\n        _errorCorrectLevel = QRErrorCorrectLevel.M;\r\n        _typeNumber = getTypeNumber(text);\r\n        addData(text);\r\n        makeImpl(false, getBestMaskPattern());\r\n        return draw();\r\n    };\r\n})();\n// HACK: we ask for $injector instead of $compile, to avoid circular dep\r\napp.factory(\"$templateCache\", [\"$cacheFactory\", $http, \"$injector\", function ($cacheFactory, $http, $injector) {\r\n    var cache = $cacheFactory(\"templates\");\r\n    var allTemplatePromise;\r\n\r\n    return {\r\n        get: function (url) {\r\n            var fromCache = cache.get(url);\r\n\r\n            // already have required template in the cache\r\n            if (fromCache) {\r\n                return fromCache;\r\n            }\r\n\r\n            // first template request ever - get the all template files\r\n            if (!allTemplatePromise) {\r\n                allTemplatePromise = $http.get(\"/Home/Templates\").then(function (response) {\r\n                    // compile the response, which will put everything into the cache\r\n                    $injector.get(\"$compile\")(response.data);\r\n                    return response;\r\n                });\r\n            }\r\n\r\n            // return the allTemplatePromise promise to all template requests\r\n            return allTemplatePromise.then(function (response) {\r\n                return {\r\n                    status: response.status,\r\n                    data: cache.get(url),\r\n                    headers: response.headers\r\n                };\r\n            });\r\n        },\r\n\r\n        put: function (key, value) {\r\n            cache.put(key, value);\r\n        }\r\n    };\r\n}]);\r\n\napp.component(\"ngChat\", {\r\n    templateUrl: \"Components/Chat\",\r\n    controller: ChatController,\r\n    bindings: {}\r\n});\napp.component(\"ngPost\", {\r\n    templateUrl: \"Components/Post\",\r\n    controller: PostController,\r\n    bindings: {\r\n        post: \"=\"\r\n    }\r\n});\napp.component(\"ngQr\", {\r\n    templateUrl: \"Components/QR\",\r\n    controller: QRController,\r\n    bindings: {\r\n        text: \"=\"\r\n    }\r\n});\napp.component(\"ngRegister\", {\r\n    templateUrl: \"Components/Register\",\r\n    controller: RegisterController,\r\n    bindings: { }\r\n});\nfunction ChatController() {\r\n    var $ctrl = this;\r\n    var location = window.location,\r\n        protocol;\r\n    if (location.protocol === \"http:\") {\r\n        protocol = \"ws:\";\r\n    } else {\r\n        protocol = \"wss:\";\r\n    }\r\n\r\n    var connection = new WebSocket(protocol + \"//\" + location.host);\r\n    connection.onopen = function () {\r\n        connection.send(\"Hello\");\r\n    };\r\n}\napp.controller(\"LoginController\", [$scope, \"TOTP\", function ($scope, totp) {\r\n    totp.success(function (data) {\r\n        $scope.totp = \"otpauth://totp/Example:alice@google.com?secret=\" + data.token + \"&issuer=Example\";\r\n    });\r\n}]);\napp.controller(\"MainController\", [$scope, function ($scope) {\r\n    $scope.posts = [{ id: 1 }, { id: 2 }];\r\n}]);\nfunction PostController() {\r\n    var $ctrl = this,\r\n        post = $ctrl.post;\r\n\r\n    $ctrl.edit = function () {\r\n        alert(post.id);\r\n    };\r\n    $ctrl.delete = function () {\r\n    };\r\n}\nfunction QRController() {\r\n    var $ctrl = this,\r\n        text = $ctrl.text;\r\n    $ctrl.data = QR.create(text);\r\n}\nfunction RegisterController() {\r\n    var $ctrl = this;\r\n\r\n    $ctrl.step = 1;\r\n    $ctrl.setStep = function (step) {\r\n        $ctrl.step = step;\r\n    }\r\n}\napp.factory(\"Topics\", [$http, function ($http) {\r\n    return {\r\n        top: function (amount) {\r\n            return $http\r\n                .get(\"\")\r\n                .success(function (data) {\r\n                    return data;\r\n                })\r\n                .failure(function (er) {\r\n                    return er;\r\n                });\r\n        }\r\n    }\r\n}]);\r\n})(angular, document, \"$scope\", \"$http\");"],"sourceRoot":"/source/"}